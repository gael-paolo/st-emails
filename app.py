# app.py

import streamlit as st
import google.generativeai as genai
import os

# --- Configuraci√≥n de la API Key desde streamlit ---
try:
    api_key = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=api_key)
except Exception as e:
    st.error("‚ùå No se encontr√≥ 'GOOGLE_API_KEY' en st.secrets. Config√∫ralo en Streamlit Cloud.")
    st.stop()

# Inicializa el modelo Gemini 2.0 Flash
try:
    model = genai.GenerativeModel('gemini-2.0-flash')
except Exception as e:
    st.error(f"Error al cargar el modelo Gemini: {e}")
    st.stop()

# --- Interfaz de usuario con Streamlit ---
st.set_page_config(page_title="Redactor de Correos - TAIYO MOTORS", layout="centered")
st.markdown("""
<style>
textarea {
  width: 100% !important;
}
</style>
""", unsafe_allow_html=True)


st.title("‚úâÔ∏è Asistente para redacci√≥n de Correos")
st.markdown("Redacta correos profesionales de forma autom√°tica. Elige entre crear un correo nuevo desde cero o  responder a un correo recibido.")

# --- Creaci√≥n de las pesta√±as con el orden corregido ---
tab1, tab2 = st.tabs(["Redactar un  Nuevo Correo", "Responder a Correo Recibido"])

with tab1:
    st.header("Redactar un nuevo correo")
    
    # Campos de entrada para redactar uno nuevo
    idea_nuevo_correo = st.text_area("üí° Describe brevemente tu idea para el nuevo correo", height=150, max_chars=3000, key="idea_nuevo")

    formalidad_nuevo = st.selectbox("üé© Nivel de formalidad", ["Alto", "Medio", "Bajo"], key="formalidad_nuevo")
    detalle_nuevo = st.selectbox("üßæ Tama√±o del correo", ["Breve", "Medio", "Detallado"], key="detalle_nuevo")
    tono_emocional_nuevo = st.selectbox("üé≠ Tono emocional", ["Neutro", "Cort√©s", "Cercano", "Emp√°tico", "Firme", "Profesional"], key="tono_nuevo")

    # Bot√≥n para generar el nuevo correo
    if st.button("Generar Correo", key="btn_nuevo"):
        if not idea_nuevo_correo.strip():
            st.warning("Por favor, completa la idea para el correo.")
        else:
            with st.spinner("‚úçÔ∏è Generando el correo..."):
                prompt_nuevo = f"""Act√∫a como un asistente de redacci√≥n profesional de correos electr√≥nicos para la empresa TAIYO MOTORS.
Genera un correo nuevo en espa√±ol de Latinoam√©rica, en primera persona del singular.

Idea principal para el correo:
<<< {idea_nuevo_correo} >>>

Par√°metros seleccionados:
- Nivel de formalidad: {formalidad_nuevo}
- Nivel de detalle: {detalle_nuevo}
- Tono emocional: {tono_emocional_nuevo}

Redacta el correo siguiendo estas reglas:
1. Usa el nivel de formalidad indicado.
2. Escribe coherentemente con la idea principal.
3. Ajusta la longitud al nivel de detalle.
4. Refleja el tono emocional solicitado.

Formato:
- Inicia con un saludo breve.
- Redacta el mensaje con claridad y coherencia.
- Finaliza con una despedida adecuada.

Genera solo el texto del correo.
"""
                try:
                    response = model.generate_content(prompt_nuevo)
                    st.success("‚úÖ Correo generado correctamente:")
                    st.text_area("üì§ Correo generado", value=response.text, height=350)
                except Exception as e:
                    st.error(f"Ocurri√≥ un error al generar el correo: {e}")

with tab2:
    st.header("Responder a correo recibido")
    
    # Campos de entrada para responder
    correo_recibido = st.text_area("üì• Pega aqu√≠ el correo recibido", height=300, max_chars=3000, key="correo_recibido_resp")
    idea_respuesta = st.text_area("üí° Describe brevemente tu idea para el correo de respuesta", height=150, max_chars=1000, key="idea_respuesta_resp")

    formalidad = st.selectbox("üé© Nivel de formalidad", ["Alto", "Medio", "Bajo"], key="formalidad_resp")
    detalle = st.selectbox("üßæ Tama√±o del correo", ["Breve", "Medio", "Detallado"], key="detalle_resp")
    tono_emocional = st.selectbox("üé≠ Tono emocional", ["Neutro", "Cort√©s", "Cercano", "Emp√°tico", "Firme", "Profesional"], key="tono_resp")

    # Bot√≥n para generar respuesta
    if st.button("Generar Respuesta", key="btn_resp"):
        if not correo_recibido.strip() or not idea_respuesta.strip():
            st.warning("Por favor, completa tanto el correo recibido como la idea para la respuesta.")
        else:
            with st.spinner("‚úçÔ∏è Generando la respuesta..."):
                prompt = f"""Act√∫a como un asistente de redacci√≥n profesional de correos electr√≥nicos para la empresa TAIYO MOTORS.
Genera la respuesta en espa√±ol de Latinoam√©rica, en primera persona del singular, como si la respuesta la enviara un individuo.

Correo recibido:
<<< {correo_recibido} >>>

Idea principal para la respuesta:
<<< {idea_respuesta} >>>

Par√°metros seleccionados:
- Nivel de formalidad: {formalidad}
- Nivel de detalle: {detalle}
- Tono emocional: {tono_emocional}

Redacta la respuesta siguiendo estas reglas:
1. Usa el nivel de formalidad indicado.
2. Responde coherentemente con la idea principal.
3. Ajusta la longitud al nivel de detalle.
4. Refleja el tono emocional solicitado.

Formato:
- Inicia con un saludo breve.
- Responde con claridad y coherencia.
- Finaliza con una despedida adecuada.

Genera solo el texto del correo.
"""
                try:
                    response = model.generate_content(prompt)
                    st.success("‚úÖ Respuesta generada correctamente:")
                    st.text_area("üì§ Respuesta generada", value=response.text, height=350)
                except Exception as e:
                    st.error(f"Ocurri√≥ un error al generar la respuesta: {e}")